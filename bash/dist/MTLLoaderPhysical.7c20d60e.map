{"version":3,"sources":["src/MTLLoaderPhysical.js"],"names":["THREE","MTLLoader","manager","undefined","DefaultLoadingManager","prototype","constructor","load","url","onLoad","onProgress","onError","scope","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","text","parse","setResourcePath","resourcePath","setTexturePath","console","warn","setCrossOrigin","value","crossOrigin","setMaterialOptions","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","key","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","setManager","setMaterials","baseUrl","options","materials","materialsArray","nameLookup","side","FrontSide","wrap","RepeatWrapping","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","preload","create","getIndex","materialName","getAsArray","index","createMaterial_","params","resolveURL","test","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","repeat","copy","scale","offset","wrapS","wrapT","n","color","Color","fromArray","emissive","transparent","reflectivity","opacity","invertTrProperty","MeshPhysicalMaterial","matParams","Vector2","items","bumpScale","splice","set","join","mapping","texture","Loader","Handlers","get","TextureLoader"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMAA,KAAK,CAACC,SAAN,GAAkB,UAASC,OAAT,EAAkB;AAChC,OAAKA,OAAL,GACIA,OAAO,KAAKC,SAAZ,GAAwBD,OAAxB,GAAkCF,KAAK,CAACI,qBAD5C;AAEH,CAHD;;AAKAJ,KAAK,CAACC,SAAN,CAAgBI,SAAhB,GAA4B;AACxBC,EAAAA,WAAW,EAAEN,KAAK,CAACC,SADK;;AAGxB;;;;;;;;;;;;;AAaAM,EAAAA,IAAI,EAAE,cAASC,GAAT,EAAcC,MAAd,EAAsBC,UAAtB,EAAkCC,OAAlC,EAA2C;AAC7C,QAAIC,KAAK,GAAG,IAAZ;AAEA,QAAIC,IAAI,GACJ,KAAKA,IAAL,KAAcV,SAAd,GACMH,KAAK,CAACc,WAAN,CAAkBC,cAAlB,CAAiCP,GAAjC,CADN,GAEM,KAAKK,IAHf;AAKA,QAAIG,MAAM,GAAG,IAAIhB,KAAK,CAACiB,UAAV,CAAqB,KAAKf,OAA1B,CAAb;AACAc,IAAAA,MAAM,CAACE,OAAP,CAAe,KAAKL,IAApB;AACAG,IAAAA,MAAM,CAACT,IAAP,CACIC,GADJ,EAEI,UAASW,IAAT,EAAe;AACXV,MAAAA,MAAM,CAACG,KAAK,CAACQ,KAAN,CAAYD,IAAZ,EAAkBN,IAAlB,CAAD,CAAN;AACH,KAJL,EAKIH,UALJ,EAMIC,OANJ;AAQH,GAlCuB;;AAoCxB;;;;;;;;;;;;AAYAO,EAAAA,OAAO,EAAE,iBAASL,IAAT,EAAe;AACpB,SAAKA,IAAL,GAAYA,IAAZ;AACA,WAAO,IAAP;AACH,GAnDuB;;AAqDxB;;;;;;;;;;;;AAYAQ,EAAAA,eAAe,EAAE,yBAASR,IAAT,EAAe;AAC5B,SAAKS,YAAL,GAAoBT,IAApB;AACA,WAAO,IAAP;AACH,GApEuB;AAsExBU,EAAAA,cAAc,EAAE,wBAASV,IAAT,EAAe;AAC3BW,IAAAA,OAAO,CAACC,IAAR,CACI,4EADJ;AAGA,WAAO,KAAKJ,eAAL,CAAqBR,IAArB,CAAP;AACH,GA3EuB;AA6ExBa,EAAAA,cAAc,EAAE,wBAASC,KAAT,EAAgB;AAC5B,SAAKC,WAAL,GAAmBD,KAAnB;AACA,WAAO,IAAP;AACH,GAhFuB;AAkFxBE,EAAAA,kBAAkB,EAAE,4BAASF,KAAT,EAAgB;AAChC,SAAKG,eAAL,GAAuBH,KAAvB;AACA,WAAO,IAAP;AACH,GArFuB;;AAuFxB;;;;;;;;;;;AAWAP,EAAAA,KAAK,EAAE,eAASD,IAAT,EAAeN,IAAf,EAAqB;AACxB,QAAIkB,KAAK,GAAGZ,IAAI,CAACa,KAAL,CAAW,IAAX,CAAZ;AACA,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,iBAAiB,GAAG,KAAxB;AACA,QAAIC,aAAa,GAAG,EAApB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,UAAIE,IAAI,GAAGP,KAAK,CAACK,CAAD,CAAhB;AACAE,MAAAA,IAAI,GAAGA,IAAI,CAACC,IAAL,EAAP;;AAEA,UAAID,IAAI,CAACD,MAAL,KAAgB,CAAhB,IAAqBC,IAAI,CAACE,MAAL,CAAY,CAAZ,MAAmB,GAA5C,EAAiD;AAC7C;AACA;AACH;;AAED,UAAIC,GAAG,GAAGH,IAAI,CAACI,OAAL,CAAa,GAAb,CAAV;AAEA,UAAIC,GAAG,GAAGF,GAAG,IAAI,CAAP,GAAWH,IAAI,CAACM,SAAL,CAAe,CAAf,EAAkBH,GAAlB,CAAX,GAAoCH,IAA9C;AACAK,MAAAA,GAAG,GAAGA,GAAG,CAACE,WAAJ,EAAN;AAEA,UAAIlB,KAAK,GAAGc,GAAG,IAAI,CAAP,GAAWH,IAAI,CAACM,SAAL,CAAeH,GAAG,GAAG,CAArB,CAAX,GAAqC,EAAjD;AACAd,MAAAA,KAAK,GAAGA,KAAK,CAACY,IAAN,EAAR;;AAEA,UAAII,GAAG,KAAK,QAAZ,EAAsB;AAClB;AAEAV,QAAAA,IAAI,GAAG;AAAEa,UAAAA,IAAI,EAAEnB;AAAR,SAAP;AACAQ,QAAAA,aAAa,CAACR,KAAD,CAAb,GAAuBM,IAAvB;AACH,OALD,MAKO;AACH,YACIU,GAAG,KAAK,IAAR,IACAA,GAAG,KAAK,IADR,IAEAA,GAAG,KAAK,IAFR,IAGAA,GAAG,KAAK,IAJZ,EAKE;AACE,cAAII,EAAE,GAAGpB,KAAK,CAACK,KAAN,CAAYE,iBAAZ,EAA+B,CAA/B,CAAT;AACAD,UAAAA,IAAI,CAACU,GAAD,CAAJ,GAAY,CACRK,UAAU,CAACD,EAAE,CAAC,CAAD,CAAH,CADF,EAERC,UAAU,CAACD,EAAE,CAAC,CAAD,CAAH,CAFF,EAGRC,UAAU,CAACD,EAAE,CAAC,CAAD,CAAH,CAHF,CAAZ;AAKH,SAZD,MAYO;AACHd,UAAAA,IAAI,CAACU,GAAD,CAAJ,GAAYhB,KAAZ;AACH;AACJ;AACJ;;AAED,QAAIsB,eAAe,GAAG,IAAIjD,KAAK,CAACC,SAAN,CAAgBiD,eAApB,CAClB,KAAK5B,YAAL,IAAqBT,IADH,EAElB,KAAKiB,eAFa,CAAtB;AAIAmB,IAAAA,eAAe,CAACvB,cAAhB,CAA+B,KAAKE,WAApC;AACAqB,IAAAA,eAAe,CAACE,UAAhB,CAA2B,KAAKjD,OAAhC;AACA+C,IAAAA,eAAe,CAACG,YAAhB,CAA6BjB,aAA7B;AACA,WAAOc,eAAP;AACH;AAzJuB,CAA5B;AA4JA;;;;;;;;;;;;;;;AAeAjD,KAAK,CAACC,SAAN,CAAgBiD,eAAhB,GAAkC,UAASG,OAAT,EAAkBC,OAAlB,EAA2B;AACzD,OAAKD,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA,OAAKC,OAAL,GAAeA,OAAf;AACA,OAAKnB,aAAL,GAAqB,EAArB;AACA,OAAKoB,SAAL,GAAiB,EAAjB;AACA,OAAKC,cAAL,GAAsB,EAAtB;AACA,OAAKC,UAAL,GAAkB,EAAlB;AAEA,OAAKC,IAAL,GACI,KAAKJ,OAAL,IAAgB,KAAKA,OAAL,CAAaI,IAA7B,GAAoC,KAAKJ,OAAL,CAAaI,IAAjD,GAAwD1D,KAAK,CAAC2D,SADlE;AAEA,OAAKC,IAAL,GACI,KAAKN,OAAL,IAAgB,KAAKA,OAAL,CAAaM,IAA7B,GACM,KAAKN,OAAL,CAAaM,IADnB,GAEM5D,KAAK,CAAC6D,cAHhB;AAIH,CAdD;;AAgBA7D,KAAK,CAACC,SAAN,CAAgBiD,eAAhB,CAAgC7C,SAAhC,GAA4C;AACxCC,EAAAA,WAAW,EAAEN,KAAK,CAACC,SAAN,CAAgBiD,eADW;AAGxCtB,EAAAA,WAAW,EAAE,WAH2B;AAKxCF,EAAAA,cAAc,EAAE,wBAASC,KAAT,EAAgB;AAC5B,SAAKC,WAAL,GAAmBD,KAAnB;AACA,WAAO,IAAP;AACH,GARuC;AAUxCwB,EAAAA,UAAU,EAAE,oBAASxB,KAAT,EAAgB;AACxB,SAAKzB,OAAL,GAAeyB,KAAf;AACH,GAZuC;AAcxCyB,EAAAA,YAAY,EAAE,sBAASjB,aAAT,EAAwB;AAClC,SAAKA,aAAL,GAAqB,KAAK2B,OAAL,CAAa3B,aAAb,CAArB;AACA,SAAKoB,SAAL,GAAiB,EAAjB;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACH,GAnBuC;AAqBxCK,EAAAA,OAAO,EAAE,iBAAS3B,aAAT,EAAwB;AAC7B,QAAI,CAAC,KAAKmB,OAAV,EAAmB,OAAOnB,aAAP;AAEnB,QAAI4B,SAAS,GAAG,EAAhB;;AAEA,SAAK,IAAIC,EAAT,IAAe7B,aAAf,EAA8B;AAC1B;AAEA,UAAI8B,GAAG,GAAG9B,aAAa,CAAC6B,EAAD,CAAvB;AAEA,UAAIE,MAAM,GAAG,EAAb;AAEAH,MAAAA,SAAS,CAACC,EAAD,CAAT,GAAgBE,MAAhB;;AAEA,WAAK,IAAIC,IAAT,IAAiBF,GAAjB,EAAsB;AAClB,YAAIG,IAAI,GAAG,IAAX;AACA,YAAIzC,KAAK,GAAGsC,GAAG,CAACE,IAAD,CAAf;AACA,YAAIE,KAAK,GAAGF,IAAI,CAACtB,WAAL,EAAZ;;AAEA,gBAAQwB,KAAR;AACI,eAAK,IAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACI;AAEA,gBAAI,KAAKf,OAAL,IAAgB,KAAKA,OAAL,CAAagB,YAAjC,EAA+C;AAC3C3C,cAAAA,KAAK,GAAG,CACJA,KAAK,CAAC,CAAD,CAAL,GAAW,GADP,EAEJA,KAAK,CAAC,CAAD,CAAL,GAAW,GAFP,EAGJA,KAAK,CAAC,CAAD,CAAL,GAAW,GAHP,CAAR;AAKH;;AAED,gBAAI,KAAK2B,OAAL,IAAgB,KAAKA,OAAL,CAAaiB,cAAjC,EAAiD;AAC7C,kBACI5C,KAAK,CAAC,CAAD,CAAL,KAAa,CAAb,IACAA,KAAK,CAAC,CAAD,CAAL,KAAa,CADb,IAEAA,KAAK,CAAC,CAAD,CAAL,KAAa,CAHjB,EAIE;AACE;AAEAyC,gBAAAA,IAAI,GAAG,KAAP;AACH;AACJ;;AAED;;AAEJ;AACI;AA7BR;;AAgCA,YAAIA,IAAJ,EAAU;AACNF,UAAAA,MAAM,CAACG,KAAD,CAAN,GAAgB1C,KAAhB;AACH;AACJ;AACJ;;AAED,WAAOoC,SAAP;AACH,GA/EuC;AAiFxCS,EAAAA,OAAO,EAAE,mBAAW;AAChB,SAAK,IAAIR,EAAT,IAAe,KAAK7B,aAApB,EAAmC;AAC/B,WAAKsC,MAAL,CAAYT,EAAZ;AACH;AACJ,GArFuC;AAuFxCU,EAAAA,QAAQ,EAAE,kBAASC,YAAT,EAAuB;AAC7B,WAAO,KAAKlB,UAAL,CAAgBkB,YAAhB,CAAP;AACH,GAzFuC;AA2FxCC,EAAAA,UAAU,EAAE,sBAAW;AACnB,QAAIC,KAAK,GAAG,CAAZ;;AAEA,SAAK,IAAIb,EAAT,IAAe,KAAK7B,aAApB,EAAmC;AAC/B,WAAKqB,cAAL,CAAoBqB,KAApB,IAA6B,KAAKJ,MAAL,CAAYT,EAAZ,CAA7B;AACA,WAAKP,UAAL,CAAgBO,EAAhB,IAAsBa,KAAtB;AACAA,MAAAA,KAAK;AACR;;AAED,WAAO,KAAKrB,cAAZ;AACH,GArGuC;AAuGxCiB,EAAAA,MAAM,EAAE,gBAASE,YAAT,EAAuB;AAC3B,QAAI,KAAKpB,SAAL,CAAeoB,YAAf,MAAiCxE,SAArC,EAAgD;AAC5C,WAAK2E,eAAL,CAAqBH,YAArB;AACH;;AAED,WAAO,KAAKpB,SAAL,CAAeoB,YAAf,CAAP;AACH,GA7GuC;AA+GxCG,EAAAA,eAAe,EAAE,yBAASH,YAAT,EAAuB;AACpC;AAEA,QAAI/D,KAAK,GAAG,IAAZ;AACA,QAAIqD,GAAG,GAAG,KAAK9B,aAAL,CAAmBwC,YAAnB,CAAV;AACA,QAAII,MAAM,GAAG;AACTjC,MAAAA,IAAI,EAAE6B,YADG;AAETjB,MAAAA,IAAI,EAAE,KAAKA;AAFF,KAAb;;AAKA,aAASsB,UAAT,CAAoB3B,OAApB,EAA6B7C,GAA7B,EAAkC;AAC9B,UAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,EAAvC,EAA2C,OAAO,EAAP,CADb,CAG9B;;AACA,UAAI,gBAAgByE,IAAhB,CAAqBzE,GAArB,CAAJ,EAA+B,OAAOA,GAAP;AAE/B,aAAO6C,OAAO,GAAG7C,GAAjB;AACH;;AAED,aAAS0E,aAAT,CAAuBC,OAAvB,EAAgCxD,KAAhC,EAAuC;AACnC,UAAIoD,MAAM,CAACI,OAAD,CAAV,EAAqB,OADc,CACN;;AAE7B,UAAIC,SAAS,GAAGxE,KAAK,CAACyE,gBAAN,CAAuB1D,KAAvB,EAA8BoD,MAA9B,CAAhB;AACA,UAAIO,GAAG,GAAG1E,KAAK,CAAC2E,WAAN,CACNP,UAAU,CAACpE,KAAK,CAACyC,OAAP,EAAgB+B,SAAS,CAAC5E,GAA1B,CADJ,CAAV;AAIA8E,MAAAA,GAAG,CAACE,MAAJ,CAAWC,IAAX,CAAgBL,SAAS,CAACM,KAA1B;AACAJ,MAAAA,GAAG,CAACK,MAAJ,CAAWF,IAAX,CAAgBL,SAAS,CAACO,MAA1B;AAEAL,MAAAA,GAAG,CAACM,KAAJ,GAAYhF,KAAK,CAACgD,IAAlB;AACA0B,MAAAA,GAAG,CAACO,KAAJ,GAAYjF,KAAK,CAACgD,IAAlB;AAEAmB,MAAAA,MAAM,CAACI,OAAD,CAAN,GAAkBG,GAAlB;AACH;;AAED,SAAK,IAAInB,IAAT,IAAiBF,GAAjB,EAAsB;AAClB,UAAItC,KAAK,GAAGsC,GAAG,CAACE,IAAD,CAAf;AACA,UAAI2B,CAAJ;AAEA,UAAInE,KAAK,KAAK,EAAd,EAAkB;;AAElB,cAAQwC,IAAI,CAACtB,WAAL,EAAR;AACI;AAEA,aAAK,IAAL;AACI;AAEAkC,UAAAA,MAAM,CAACgB,KAAP,GAAe,IAAI/F,KAAK,CAACgG,KAAV,GAAkBC,SAAlB,CAA4BtE,KAA5B,CAAf;AAEA;;AAEJ,aAAK,IAAL;AACI;AACA;AAEA;;AAEJ,aAAK,IAAL;AACI;AACAoD,UAAAA,MAAM,CAACmB,QAAP,GAAkB,IAAIlG,KAAK,CAACgG,KAAV,GAAkBC,SAAlB,CAA4BtE,KAA5B,CAAlB;AAEA;;AAEJ,aAAK,QAAL;AACI;AAEAuD,UAAAA,aAAa,CAAC,KAAD,EAAQvD,KAAR,CAAb;AAEA;;AAEJ,aAAK,QAAL;AACI;AAEAuD,UAAAA,aAAa,CAAC,aAAD,EAAgBvD,KAAhB,CAAb;AAEA;;AAEJ,aAAK,QAAL;AACI;AAEAuD,UAAAA,aAAa,CAAC,aAAD,EAAgBvD,KAAhB,CAAb;AAEA;;AAEJ,aAAK,MAAL;AACIuD,UAAAA,aAAa,CAAC,WAAD,EAAcvD,KAAd,CAAb;AAEA;;AAEJ,aAAK,UAAL;AACA,aAAK,MAAL;AACI;AAEAuD,UAAAA,aAAa,CAAC,SAAD,EAAYvD,KAAZ,CAAb;AAEA;;AAEJ,aAAK,OAAL;AACI;AAEAuD,UAAAA,aAAa,CAAC,UAAD,EAAavD,KAAb,CAAb;AACAoD,UAAAA,MAAM,CAACoB,WAAP,GAAqB,IAArB;AAEA;;AAEJ,aAAK,IAAL;AACI;AACA;AAEApB,UAAAA,MAAM,CAACqB,YAAP,GAAsBpD,UAAU,CAACrB,KAAD,CAAV,GAAoB,GAA1C;AAEA;;AAEJ,aAAK,GAAL;AACImE,UAAAA,CAAC,GAAG9C,UAAU,CAACrB,KAAD,CAAd;;AAEA,cAAImE,CAAC,GAAG,CAAR,EAAW;AACPf,YAAAA,MAAM,CAACsB,OAAP,GAAiBP,CAAjB;AACAf,YAAAA,MAAM,CAACoB,WAAP,GAAqB,IAArB;AACH;;AAED;;AAEJ,aAAK,IAAL;AACIL,UAAAA,CAAC,GAAG9C,UAAU,CAACrB,KAAD,CAAd;AAEA,cAAI,KAAK2B,OAAL,IAAgB,KAAKA,OAAL,CAAagD,gBAAjC,EACIR,CAAC,GAAG,IAAIA,CAAR;;AAEJ,cAAIA,CAAC,GAAG,CAAR,EAAW;AACPf,YAAAA,MAAM,CAACsB,OAAP,GAAiB,IAAIP,CAArB;AACAf,YAAAA,MAAM,CAACoB,WAAP,GAAqB,IAArB;AACH;;AAED;;AAEJ;AACI;AAhGR;AAkGH;;AAED,SAAK5C,SAAL,CAAeoB,YAAf,IAA+B,IAAI3E,KAAK,CAACuG,oBAAV,CAA+BxB,MAA/B,CAA/B;AACA,WAAO,KAAKxB,SAAL,CAAeoB,YAAf,CAAP;AACH,GA/PuC;AAiQxCU,EAAAA,gBAAgB,EAAE,0BAAS1D,KAAT,EAAgB6E,SAAhB,EAA2B;AACzC,QAAIpB,SAAS,GAAG;AACZM,MAAAA,KAAK,EAAE,IAAI1F,KAAK,CAACyG,OAAV,CAAkB,CAAlB,EAAqB,CAArB,CADK;AAEZd,MAAAA,MAAM,EAAE,IAAI3F,KAAK,CAACyG,OAAV,CAAkB,CAAlB,EAAqB,CAArB;AAFI,KAAhB;AAKA,QAAIC,KAAK,GAAG/E,KAAK,CAACK,KAAN,CAAY,KAAZ,CAAZ;AACA,QAAIS,GAAJ;AAEAA,IAAAA,GAAG,GAAGiE,KAAK,CAAChE,OAAN,CAAc,KAAd,CAAN;;AAEA,QAAID,GAAG,IAAI,CAAX,EAAc;AACV+D,MAAAA,SAAS,CAACG,SAAV,GAAsB3D,UAAU,CAAC0D,KAAK,CAACjE,GAAG,GAAG,CAAP,CAAN,CAAhC;AACAiE,MAAAA,KAAK,CAACE,MAAN,CAAanE,GAAb,EAAkB,CAAlB;AACH;;AAEDA,IAAAA,GAAG,GAAGiE,KAAK,CAAChE,OAAN,CAAc,IAAd,CAAN;;AAEA,QAAID,GAAG,IAAI,CAAX,EAAc;AACV2C,MAAAA,SAAS,CAACM,KAAV,CAAgBmB,GAAhB,CACI7D,UAAU,CAAC0D,KAAK,CAACjE,GAAG,GAAG,CAAP,CAAN,CADd,EAEIO,UAAU,CAAC0D,KAAK,CAACjE,GAAG,GAAG,CAAP,CAAN,CAFd;AAIAiE,MAAAA,KAAK,CAACE,MAAN,CAAanE,GAAb,EAAkB,CAAlB,EALU,CAKY;AACzB;;AAEDA,IAAAA,GAAG,GAAGiE,KAAK,CAAChE,OAAN,CAAc,IAAd,CAAN;;AAEA,QAAID,GAAG,IAAI,CAAX,EAAc;AACV2C,MAAAA,SAAS,CAACO,MAAV,CAAiBkB,GAAjB,CACI7D,UAAU,CAAC0D,KAAK,CAACjE,GAAG,GAAG,CAAP,CAAN,CADd,EAEIO,UAAU,CAAC0D,KAAK,CAACjE,GAAG,GAAG,CAAP,CAAN,CAFd;AAIAiE,MAAAA,KAAK,CAACE,MAAN,CAAanE,GAAb,EAAkB,CAAlB,EALU,CAKY;AACzB;;AAED2C,IAAAA,SAAS,CAAC5E,GAAV,GAAgBkG,KAAK,CAACI,IAAN,CAAW,GAAX,EAAgBvE,IAAhB,EAAhB;AACA,WAAO6C,SAAP;AACH,GAvSuC;AAySxCG,EAAAA,WAAW,EAAE,qBAAS/E,GAAT,EAAcuG,OAAd,EAAuBtG,MAAvB,EAA+BC,UAA/B,EAA2CC,OAA3C,EAAoD;AAC7D,QAAIqG,OAAJ;AACA,QAAIhG,MAAM,GAAGhB,KAAK,CAACiH,MAAN,CAAaC,QAAb,CAAsBC,GAAtB,CAA0B3G,GAA1B,CAAb;AACA,QAAIN,OAAO,GACP,KAAKA,OAAL,KAAiBC,SAAjB,GACM,KAAKD,OADX,GAEMF,KAAK,CAACI,qBAHhB;;AAKA,QAAIY,MAAM,KAAK,IAAf,EAAqB;AACjBA,MAAAA,MAAM,GAAG,IAAIhB,KAAK,CAACoH,aAAV,CAAwBlH,OAAxB,CAAT;AACH;;AAED,QAAIc,MAAM,CAACU,cAAX,EAA2BV,MAAM,CAACU,cAAP,CAAsB,KAAKE,WAA3B;AAC3BoF,IAAAA,OAAO,GAAGhG,MAAM,CAACT,IAAP,CAAYC,GAAZ,EAAiBC,MAAjB,EAAyBC,UAAzB,EAAqCC,OAArC,CAAV;AAEA,QAAIoG,OAAO,KAAK5G,SAAhB,EAA2B6G,OAAO,CAACD,OAAR,GAAkBA,OAAlB;AAE3B,WAAOC,OAAP;AACH;AA3TuC,CAA5C","file":"MTLLoaderPhysical.7c20d60e.map","sourceRoot":"..","sourcesContent":["/**\n * Loads a Wavefront .mtl file specifying materials\n *\n * @author angelxuanchang\n */\n\nTHREE.MTLLoader = function(manager) {\n    this.manager =\n        manager !== undefined ? manager : THREE.DefaultLoadingManager;\n};\n\nTHREE.MTLLoader.prototype = {\n    constructor: THREE.MTLLoader,\n\n    /**\n     * Loads and parses a MTL asset from a URL.\n     *\n     * @param {String} url - URL to the MTL file.\n     * @param {Function} [onLoad] - Callback invoked with the loaded object.\n     * @param {Function} [onProgress] - Callback for download progress.\n     * @param {Function} [onError] - Callback for download errors.\n     *\n     * @see setPath setResourcePath\n     *\n     * @note In order for relative texture references to resolve correctly\n     * you must call setResourcePath() explicitly prior to load.\n     */\n    load: function(url, onLoad, onProgress, onError) {\n        var scope = this;\n\n        var path =\n            this.path === undefined\n                ? THREE.LoaderUtils.extractUrlBase(url)\n                : this.path;\n\n        var loader = new THREE.FileLoader(this.manager);\n        loader.setPath(this.path);\n        loader.load(\n            url,\n            function(text) {\n                onLoad(scope.parse(text, path));\n            },\n            onProgress,\n            onError\n        );\n    },\n\n    /**\n     * Set base path for resolving references.\n     * If set this path will be prepended to each loaded and found reference.\n     *\n     * @see setResourcePath\n     * @param {String} path\n     * @return {THREE.MTLLoader}\n     *\n     * @example\n     *     mtlLoader.setPath( 'assets/obj/' );\n     *     mtlLoader.load( 'my.mtl', ... );\n     */\n    setPath: function(path) {\n        this.path = path;\n        return this;\n    },\n\n    /**\n     * Set base path for additional resources like textures.\n     *\n     * @see setPath\n     * @param {String} path\n     * @return {THREE.MTLLoader}\n     *\n     * @example\n     *     mtlLoader.setPath( 'assets/obj/' );\n     *     mtlLoader.setResourcePath( 'assets/textures/' );\n     *     mtlLoader.load( 'my.mtl', ... );\n     */\n    setResourcePath: function(path) {\n        this.resourcePath = path;\n        return this;\n    },\n\n    setTexturePath: function(path) {\n        console.warn(\n            \"THREE.MTLLoader: .setTexturePath() has been renamed to .setResourcePath().\"\n        );\n        return this.setResourcePath(path);\n    },\n\n    setCrossOrigin: function(value) {\n        this.crossOrigin = value;\n        return this;\n    },\n\n    setMaterialOptions: function(value) {\n        this.materialOptions = value;\n        return this;\n    },\n\n    /**\n     * Parses a MTL file.\n     *\n     * @param {String} text - Content of MTL file\n     * @return {THREE.MTLLoader.MaterialCreator}\n     *\n     * @see setPath setResourcePath\n     *\n     * @note In order for relative texture references to resolve correctly\n     * you must call setResourcePath() explicitly prior to parse.\n     */\n    parse: function(text, path) {\n        var lines = text.split(\"\\n\");\n        var info = {};\n        var delimiter_pattern = /\\s+/;\n        var materialsInfo = {};\n\n        for (var i = 0; i < lines.length; i++) {\n            var line = lines[i];\n            line = line.trim();\n\n            if (line.length === 0 || line.charAt(0) === \"#\") {\n                // Blank line or comment ignore\n                continue;\n            }\n\n            var pos = line.indexOf(\" \");\n\n            var key = pos >= 0 ? line.substring(0, pos) : line;\n            key = key.toLowerCase();\n\n            var value = pos >= 0 ? line.substring(pos + 1) : \"\";\n            value = value.trim();\n\n            if (key === \"newmtl\") {\n                // New material\n\n                info = { name: value };\n                materialsInfo[value] = info;\n            } else {\n                if (\n                    key === \"ka\" ||\n                    key === \"kd\" ||\n                    key === \"ks\" ||\n                    key === \"ke\"\n                ) {\n                    var ss = value.split(delimiter_pattern, 3);\n                    info[key] = [\n                        parseFloat(ss[0]),\n                        parseFloat(ss[1]),\n                        parseFloat(ss[2])\n                    ];\n                } else {\n                    info[key] = value;\n                }\n            }\n        }\n\n        var materialCreator = new THREE.MTLLoader.MaterialCreator(\n            this.resourcePath || path,\n            this.materialOptions\n        );\n        materialCreator.setCrossOrigin(this.crossOrigin);\n        materialCreator.setManager(this.manager);\n        materialCreator.setMaterials(materialsInfo);\n        return materialCreator;\n    }\n};\n\n/**\n * Create a new THREE-MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\nTHREE.MTLLoader.MaterialCreator = function(baseUrl, options) {\n    this.baseUrl = baseUrl || \"\";\n    this.options = options;\n    this.materialsInfo = {};\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n\n    this.side =\n        this.options && this.options.side ? this.options.side : THREE.FrontSide;\n    this.wrap =\n        this.options && this.options.wrap\n            ? this.options.wrap\n            : THREE.RepeatWrapping;\n};\n\nTHREE.MTLLoader.MaterialCreator.prototype = {\n    constructor: THREE.MTLLoader.MaterialCreator,\n\n    crossOrigin: \"anonymous\",\n\n    setCrossOrigin: function(value) {\n        this.crossOrigin = value;\n        return this;\n    },\n\n    setManager: function(value) {\n        this.manager = value;\n    },\n\n    setMaterials: function(materialsInfo) {\n        this.materialsInfo = this.convert(materialsInfo);\n        this.materials = {};\n        this.materialsArray = [];\n        this.nameLookup = {};\n    },\n\n    convert: function(materialsInfo) {\n        if (!this.options) return materialsInfo;\n\n        var converted = {};\n\n        for (var mn in materialsInfo) {\n            // Convert materials info into normalized form based on options\n\n            var mat = materialsInfo[mn];\n\n            var covmat = {};\n\n            converted[mn] = covmat;\n\n            for (var prop in mat) {\n                var save = true;\n                var value = mat[prop];\n                var lprop = prop.toLowerCase();\n\n                switch (lprop) {\n                    case \"kd\":\n                    case \"ka\":\n                    case \"ks\":\n                        // Diffuse color (color under white light) using RGB values\n\n                        if (this.options && this.options.normalizeRGB) {\n                            value = [\n                                value[0] / 255,\n                                value[1] / 255,\n                                value[2] / 255\n                            ];\n                        }\n\n                        if (this.options && this.options.ignoreZeroRGBs) {\n                            if (\n                                value[0] === 0 &&\n                                value[1] === 0 &&\n                                value[2] === 0\n                            ) {\n                                // ignore\n\n                                save = false;\n                            }\n                        }\n\n                        break;\n\n                    default:\n                        break;\n                }\n\n                if (save) {\n                    covmat[lprop] = value;\n                }\n            }\n        }\n\n        return converted;\n    },\n\n    preload: function() {\n        for (var mn in this.materialsInfo) {\n            this.create(mn);\n        }\n    },\n\n    getIndex: function(materialName) {\n        return this.nameLookup[materialName];\n    },\n\n    getAsArray: function() {\n        var index = 0;\n\n        for (var mn in this.materialsInfo) {\n            this.materialsArray[index] = this.create(mn);\n            this.nameLookup[mn] = index;\n            index++;\n        }\n\n        return this.materialsArray;\n    },\n\n    create: function(materialName) {\n        if (this.materials[materialName] === undefined) {\n            this.createMaterial_(materialName);\n        }\n\n        return this.materials[materialName];\n    },\n\n    createMaterial_: function(materialName) {\n        // Create material\n\n        var scope = this;\n        var mat = this.materialsInfo[materialName];\n        var params = {\n            name: materialName,\n            side: this.side\n        };\n\n        function resolveURL(baseUrl, url) {\n            if (typeof url !== \"string\" || url === \"\") return \"\";\n\n            // Absolute URL\n            if (/^https?:\\/\\//i.test(url)) return url;\n\n            return baseUrl + url;\n        }\n\n        function setMapForType(mapType, value) {\n            if (params[mapType]) return; // Keep the first encountered texture\n\n            var texParams = scope.getTextureParams(value, params);\n            var map = scope.loadTexture(\n                resolveURL(scope.baseUrl, texParams.url)\n            );\n\n            map.repeat.copy(texParams.scale);\n            map.offset.copy(texParams.offset);\n\n            map.wrapS = scope.wrap;\n            map.wrapT = scope.wrap;\n\n            params[mapType] = map;\n        }\n\n        for (var prop in mat) {\n            var value = mat[prop];\n            var n;\n\n            if (value === \"\") continue;\n\n            switch (prop.toLowerCase()) {\n                // Ns is material specular exponent\n\n                case \"kd\":\n                    // Diffuse color (color under white light) using RGB values\n\n                    params.color = new THREE.Color().fromArray(value);\n\n                    break;\n\n                case \"ks\":\n                    // Specular color (color when light is reflected from shiny surface) using RGB values\n                    // params.specular = new THREE.Color().fromArray(value);\n\n                    break;\n\n                case \"ke\":\n                    // Emissive using RGB values\n                    params.emissive = new THREE.Color().fromArray(value);\n\n                    break;\n\n                case \"map_kd\":\n                    // Diffuse texture map\n\n                    setMapForType(\"map\", value);\n\n                    break;\n\n                case \"map_ks\":\n                    // Specular map\n\n                    setMapForType(\"specularMap\", value);\n\n                    break;\n\n                case \"map_ke\":\n                    // Emissive map\n\n                    setMapForType(\"emissiveMap\", value);\n\n                    break;\n\n                case \"norm\":\n                    setMapForType(\"normalMap\", value);\n\n                    break;\n\n                case \"map_bump\":\n                case \"bump\":\n                    // Bump texture map\n\n                    setMapForType(\"bumpMap\", value);\n\n                    break;\n\n                case \"map_d\":\n                    // Alpha map\n\n                    setMapForType(\"alphaMap\", value);\n                    params.transparent = true;\n\n                    break;\n\n                case \"ns\":\n                    // The specular exponent (defines the focus of the specular highlight)\n                    // A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n                    params.reflectivity = parseFloat(value) / 100;\n\n                    break;\n\n                case \"d\":\n                    n = parseFloat(value);\n\n                    if (n < 1) {\n                        params.opacity = n;\n                        params.transparent = true;\n                    }\n\n                    break;\n\n                case \"tr\":\n                    n = parseFloat(value);\n\n                    if (this.options && this.options.invertTrProperty)\n                        n = 1 - n;\n\n                    if (n > 0) {\n                        params.opacity = 1 - n;\n                        params.transparent = true;\n                    }\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n\n        this.materials[materialName] = new THREE.MeshPhysicalMaterial(params);\n        return this.materials[materialName];\n    },\n\n    getTextureParams: function(value, matParams) {\n        var texParams = {\n            scale: new THREE.Vector2(1, 1),\n            offset: new THREE.Vector2(0, 0)\n        };\n\n        var items = value.split(/\\s+/);\n        var pos;\n\n        pos = items.indexOf(\"-bm\");\n\n        if (pos >= 0) {\n            matParams.bumpScale = parseFloat(items[pos + 1]);\n            items.splice(pos, 2);\n        }\n\n        pos = items.indexOf(\"-s\");\n\n        if (pos >= 0) {\n            texParams.scale.set(\n                parseFloat(items[pos + 1]),\n                parseFloat(items[pos + 2])\n            );\n            items.splice(pos, 4); // we expect 3 parameters here!\n        }\n\n        pos = items.indexOf(\"-o\");\n\n        if (pos >= 0) {\n            texParams.offset.set(\n                parseFloat(items[pos + 1]),\n                parseFloat(items[pos + 2])\n            );\n            items.splice(pos, 4); // we expect 3 parameters here!\n        }\n\n        texParams.url = items.join(\" \").trim();\n        return texParams;\n    },\n\n    loadTexture: function(url, mapping, onLoad, onProgress, onError) {\n        var texture;\n        var loader = THREE.Loader.Handlers.get(url);\n        var manager =\n            this.manager !== undefined\n                ? this.manager\n                : THREE.DefaultLoadingManager;\n\n        if (loader === null) {\n            loader = new THREE.TextureLoader(manager);\n        }\n\n        if (loader.setCrossOrigin) loader.setCrossOrigin(this.crossOrigin);\n        texture = loader.load(url, onLoad, onProgress, onError);\n\n        if (mapping !== undefined) texture.mapping = mapping;\n\n        return texture;\n    }\n};\n"]}